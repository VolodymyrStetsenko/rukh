version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: rukh-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rukh}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rukh_password}
      POSTGRES_DB: ${POSTGRES_DB:-rukh}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rukh"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rukh-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rukh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rukh-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: rukh-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rukh-network

  # NATS Message Queue
  nats:
    image: nats:2-alpine
    container_name: rukh-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: "--http_port 8222"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rukh-network

  # API Gateway
  api-gateway:
    build:
      context: ../../apps/api-gateway
      dockerfile: Dockerfile
    container_name: rukh-api-gateway
    environment:
      DATABASE_URL: postgresql://rukh:rukh_password@postgres:5432/rukh
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - rukh-network

  # Web Frontend
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
    container_name: rukh-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - rukh-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  rukh-network:
    driver: bridge

